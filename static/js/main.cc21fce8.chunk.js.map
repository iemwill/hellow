{"version":3,"sources":["Components/Backend/NFT/addWebAppAction.js","Components/Frontend/Contact.js","index.js"],"names":["buttonID","account","userAccount","sessionID","sourceAccount","web3","Web3","contractAddress","websiteNFTcontract","eth","Contract","websiteNFTabi","myData","methods","mintToken","utils","toHex","encodeABI","estimateGas","from","console","log","getTransactionCount","txCount","net","getId","networkId","txObject","nonce","to","chainId","value","toWei","gasLimit","Math","round","data","maxPriorityFeePerGas","type","accounts","signTransaction","process","raw","sendSignedTransaction","rawTransaction","transaction","addWebAppAction","Contact","state","text","this","props","customerAccount","error","href","onClick","_addWebAppAction","seed","target","rel","id","className","Component","Application","count","NFTsCount","call","tokenID","window","ethereum","request","method","mintNFT","setState","create","randomHex","address","privateKey","initSession","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cc21fce8.chunk.js","sourcesContent":["import Web3 from 'web3';\nimport websiteNFTabi from'./websiteNFT.json';\nasync function addWebAppAction(buttonID, account, userAccount, sessionID) {\n\ttry {\n\t\tconst sourceAccount = '0x81EFbfd5853a0831031222dB1C93e1FA914A34e3';\n    const web3 = new Web3(\"https://rpc.api.moonbase.moonbeam.network\");\n\t\tconst contractAddress = '0xc3e13D5E3e8fFa7E601f657Fd690AF70E224d1a5';\n\t\tconst websiteNFTcontract = new web3.eth.Contract(websiteNFTabi, contractAddress);\n    if(userAccount == 0) {\n      const myData = websiteNFTcontract.methods.mintToken(\n        web3.utils.toHex(sessionID), account, web3.utils.toHex(buttonID)).encodeABI();\n      const estimateGas = await websiteNFTcontract.methods.mintToken(\n        web3.utils.toHex(sessionID), account, web3.utils.toHex(buttonID)).estimateGas({from: sourceAccount});\n      console.log('ESTIMATED GAS FOR CLICK ACTION: ', estimateGas)\n      const txCount = await web3.eth.getTransactionCount(sourceAccount);\n      const networkId = await web3.eth.net.getId();\n      // Build the transaction\n      const txObject = {\n        nonce: web3.utils.toHex(txCount),\n        to: contractAddress,\n        from: sourceAccount,\n        chainId: networkId,\n        value: web3.utils.toHex(web3.utils.toWei('0', 'ether')),\n        gasLimit: web3.utils.toHex(Math.round(estimateGas * 1.1)),\n        data: myData,\n        maxPriorityFeePerGas: web3.utils.toHex(web3.utils.toWei('1', 'Gwei')),\n        type: 0x02\n      };       \n      // Sign the transaction\n      const raw = await web3.eth.accounts.signTransaction(\n        txObject,\n        process.env.REACT_APP_PRIVATE_KEY\n      );\n      // Broadcast the transaction\n      console.log(\"Broadcasting the transaction to the network...\");\n      const transaction = await web3.eth.sendSignedTransaction(raw.rawTransaction);\n      console.log('TX: ', transaction);\n    } else {\n      const myData = websiteNFTcontract.methods.mintToken(\n        web3.utils.toHex(sessionID), account, userAccount, web3.utils.toHex(buttonID)).encodeABI();\n      const estimateGas = await websiteNFTcontract.methods.mintToken(\n        web3.utils.toHex(sessionID), account, userAccount, web3.utils.toHex(buttonID)).estimateGas({from: sourceAccount});\n      console.log('ESTIMATED GAS FOR CLICK ACTION: ', estimateGas)\n      const txCount = await web3.eth.getTransactionCount(sourceAccount);\n      const networkId = await web3.eth.net.getId();\n      // Build the transaction\n      const txObject = {\n        nonce: web3.utils.toHex(txCount),\n        to: contractAddress,\n        from: sourceAccount,\n        chainId: networkId,\n        value: web3.utils.toHex(web3.utils.toWei('0', 'ether')),\n        gasLimit: web3.utils.toHex(Math.round(estimateGas * 1.1)),\n        data: myData,\n        maxPriorityFeePerGas: web3.utils.toHex(web3.utils.toWei('1', 'Gwei')),\n        type: 0x02\n      };\n      // Sign the transaction\n      const raw = await web3.eth.accounts.signTransaction(\n        txObject,\n        process.env.REACT_APP_PRIVATE_KEY\n      );\n      // Broadcast the transaction\n      console.log(\"Broadcasting the transaction to the network...\");\n      const transaction = await web3.eth.sendSignedTransaction(raw.rawTransaction);\n      console.log('TX: ', transaction);\n    }\n  } catch (error) {\n  \tconsole.log('Add Action failed: ', error);\n  }\n}\nexport default addWebAppAction;","import React, { Component } from 'react';\r\nimport addWebAppAction from '../Backend/NFT/addWebAppAction';\r\nimport { \r\n  FaLinkedin,\r\n  FaGithub,\r\n  FaTelegram,\r\n  FaTwitter,\r\n  FaWhatsapp,\r\n} from 'react-icons/fa';\r\nclass Contact extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      text: { },\r\n    }\r\n  }\r\n  async _addWebAppAction (buttonID) {\r\n    try {\r\n      if(this.props.customerAccount == \"Your connected address will show up here\")\r\n        addWebAppAction(buttonID, \"0x81EFbfd5853a0831031222dB1C93e1FA914A34e3\", this.props.userAccount, this.props.sessionID);\r\n      else\r\n        addWebAppAction(buttonID, this.props.customerAccount, 0, this.props.sessionID);\r\n    } catch(error) {\r\n      console.log(\"Error addWebAppAction: \" + error);\r\n    }\r\n  }\r\n  render() {\r\n      if (this.props.customerAccount == \"Your connected address will show up here\") {\r\n      this.state.text = \r\n        <h3>\r\n          Congratulations! You have created an address for ethereum and minted a NFT<br/><br/>\r\n          The private key to manifest ownership will show up below, best praxis is to write it on a paper<br/><br/>\r\n          For workshop & project requests as well as how to claim the newly generated NFT & ERC20-tokens \r\n          write an email via the<br/><br/>\r\n          <a href=\"mailto:hello@laubenheimer.eu\"\r\n          onClick={() => this._addWebAppAction(9)}> 'Inspirator & Consultent' - button</a>\r\n          <br/><br/><br/><br/><br/>\r\n          {this.props.seed}\r\n        </h3>\r\n    } else {\r\n      this.state.text = \r\n        <h3>\r\n          Congratulations! You have minted a \r\n            <a href=\"https://moonbase.moonscan.io/address/0xc3e13D5E3e8fFa7E601f657Fd690AF70E224d1a5\"\r\n              onClick={() => this._addWebAppAction(10)} target=\"_blank\" rel=\"noreferrer\">Website NFT</a> \r\n          on the moonbase test-network<br/><br/>\r\n          The NFT will be accessible through your wallet provider and every click-action on this site will create ERC20-token<br/><br/>\r\n          To enhance your knowledge in web3, blockchain technology and solidity write a workshop request via the<br/><br/>\r\n          <a href=\"mailto:hello@laubenheimer.eu\"\r\n          onClick={() => this._addWebAppAction(9)}>'Inspirator & Consultent' - button</a>\r\n          <br/><br/><br/><br/><br/>\r\n          {this.props.customerAccount}\r\n        </h3>\r\n    }\r\n    return (\r\n      <section id=\"contact\">\r\n        <div className=\"contact\">\r\n          <h2>Analysis | Consultancy | Design | Development | Education </h2>\r\n          <br/><br/><br/><br/><br/>\r\n          <a href=\"https://wa.me/message/AAIDX7NDPAJ3J1\" target=\"_blank\" rel=\"noreferrer\"\r\n            onClick={() => this._addWebAppAction(1)}><FaWhatsapp/></a>\r\n          <a href=\"https://twitter.com/iem_wll\" target=\"_blank\" rel=\"noreferrer\"\r\n            onClick={() => this._addWebAppAction(2)}><FaTwitter/></a>\r\n          <a href=\"https://github.com/iemwill\" target=\"_blank\" rel=\"noreferrer\"\r\n            onClick={() => this._addWebAppAction(3)}><FaGithub/></a>\r\n          <a href=\"https://t.me/whatuup\" target=\"_blank\" rel=\"noreferrer\"\r\n            onClick={() => this._addWebAppAction(4)}><FaTelegram/></a>\r\n          <a href=\"https://linkedin.com/in/w-ll\" target=\"_blank\" rel=\"noreferrer\"\r\n            onClick={() => this._addWebAppAction(5)}><FaLinkedin/></a>\r\n          <br/><br/><br/><br/>\r\n        </div>\r\n        <div id=\"c0n74c7\">\r\n          <a href=\"mailto:hello@laubenheimer.eu\" \r\n            onClick={() => this._addWebAppAction(6)}><h3>Inspirator</h3></a>\r\n          <a href=\"mailto:hello@laubenheimer.eu\"\r\n            onClick={() => this._addWebAppAction(7)}><h3> & </h3></a>\r\n          <a href=\"mailto:hello@laubenheimer.eu\"\r\n            onClick={() => this._addWebAppAction(8)}><h3>Consultent</h3></a>\r\n          <br/><br/><br/><br/>\r\n        </div>\r\n        <div id=\"text\">\r\n          {this.state.text}\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\nexport default Contact;","import React, {Component} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Web3 from 'web3';\r\nimport Contact from './Components/Frontend/Contact';\r\nimport websiteNFTabi from'./Components/Backend/NFT/websiteNFT.json';\r\nclass Application extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      count: 0,\r\n      sessionID: null,\r\n      seed: \"Be patient, we use 2048 random bits to create the private key which will show up here, if you have not connected your wallet\",\r\n      customerAccount: \"Your connected address will show up here\",\r\n      userAccount: \"To be computed\",\r\n      txObject: { },\r\n    };\r\n  }\r\n  async initSession() {\r\n    try {\r\n      this.state.count = 1;\r\n      const sourceAccount = '0x81EFbfd5853a0831031222dB1C93e1FA914A34e3';\r\n      const web3 = new Web3(\"https://rpc.api.moonbase.moonbeam.network\");\r\n      const contractAddress = '0xc3e13D5E3e8fFa7E601f657Fd690AF70E224d1a5';\r\n      const websiteNFTcontract = new web3.eth.Contract(websiteNFTabi, contractAddress);\r\n      const tokenID = await websiteNFTcontract.methods.NFTsCount().call();\r\n      //Use of existing web3 wallet\r\n      if(window.ethereum) {\r\n        console.log('Requesting wallet.');\r\n        const account = await window.ethereum.request({method:'eth_requestAccounts'});\r\n        console.log(\"Connected Account: \" + account[0]);\r\n        const myData = websiteNFTcontract.methods.mintNFT(\r\n          sourceAccount, tokenID, \"https://laubenheimer.eu/NFTs/\" + tokenID, account[0]).encodeABI();\r\n        const estimateGas = await websiteNFTcontract.methods.mintNFT(\r\n          sourceAccount, tokenID, \"https://laubenheimer.eu/NFTs/\" + tokenID, account[0]).estimateGas({from: sourceAccount});\r\n        console.log('ESTIMATED GAS WITH EXISTING ACCOUNT: ', estimateGas);\r\n        const txCount = await web3.eth.getTransactionCount(sourceAccount);\r\n        const networkId = await web3.eth.net.getId();\r\n        // Build the transaction\r\n        const txObject = {\r\n          nonce: web3.utils.toHex(txCount),\r\n          to: contractAddress,\r\n          from: sourceAccount,\r\n          chainId: networkId,\r\n          value: web3.utils.toHex(web3.utils.toWei('0', 'ether')),\r\n          gasLimit: web3.utils.toHex(Math.round(estimateGas * 1.1)),\r\n          data: myData,\r\n          maxPriorityFeePerGas: web3.utils.toHex(web3.utils.toWei('2', 'gwei')),\r\n          type: 0x02\r\n        };\r\n        this.setState({sessionID: tokenID, customerAccount: account[0], txObject: txObject});\r\n      }\r\n      //Create web3 wallet/account\r\n      else {\r\n        const account = web3.eth.accounts.create(web3.utils.randomHex(2048));\r\n        console.log(\"Created Account 1: \" + account.address);\r\n        const myData = websiteNFTcontract.methods.mintNFT(\r\n        sourceAccount, tokenID, \"https://laubenheimer.eu/NFTs/\" + tokenID, account.address).encodeABI();\r\n        const estimateGas = await websiteNFTcontract.methods.mintNFT(\r\n        sourceAccount, tokenID, \"https://laubenheimer.eu/NFTs/\" + tokenID, account.address).estimateGas({from: sourceAccount});\r\n        console.log('ESTIMATED GAS WITH CREATED ACCOUNT: ', estimateGas);\r\n        const txCount = await web3.eth.getTransactionCount(sourceAccount);\r\n        const networkId = await web3.eth.net.getId();\r\n        // Build the transaction\r\n        const txObject = {\r\n          nonce: web3.utils.toHex(txCount),\r\n          to: contractAddress,\r\n          from: sourceAccount,\r\n          chainId: networkId,\r\n          value: web3.utils.toHex(web3.utils.toWei('0', 'ether')),\r\n          gasLimit: web3.utils.toHex(Math.round(estimateGas * 1.1)),\r\n          data: myData,\r\n          maxPriorityFeePerGas: web3.utils.toHex(web3.utils.toWei('2', 'gwei')),\r\n          type: 0x02\r\n        };\r\n        this.setState({sessionID: tokenID, seed: account.privateKey, userAccount: account.address, txObject: txObject});\r\n      }\r\n      // Sign the transaction\r\n      const raw = await web3.eth.accounts.signTransaction(\r\n        this.state.txObject,\r\n        process.env.REACT_APP_PRIVATE_KEY\r\n      );\r\n      // Broadcast the transaction\r\n      console.log(\"Broadcasting the transaction to the network...\");\r\n      const transaction = await web3.eth.sendSignedTransaction(raw.rawTransaction);\r\n      console.log('TX: ', transaction);\r\n      console.log('SessionID: ', tokenID);\r\n    }\r\n    catch (error) {\r\n      try {\r\n        console.log('Initialization failed 1: ', error);\r\n        const sourceAccount = '0x81EFbfd5853a0831031222dB1C93e1FA914A34e3';\r\n        const web3 = new Web3(\"https://rpc.api.moonbase.moonbeam.network\");\r\n        const contractAddress = '0xc3e13D5E3e8fFa7E601f657Fd690AF70E224d1a5';\r\n        const account = web3.eth.accounts.create(web3.utils.randomHex(2048));\r\n        console.log(\"Created Account 1: \" + account.address);\r\n        const websiteNFTcontract = new web3.eth.Contract(websiteNFTabi, contractAddress);\r\n        const tokenID = await websiteNFTcontract.methods.NFTsCount().call();\r\n        const myData = websiteNFTcontract.methods.mintNFT(\r\n        sourceAccount, tokenID, \"https://laubenheimer.eu/NFTs/\" + tokenID, account.address).encodeABI();\r\n        const estimateGas = await websiteNFTcontract.methods.mintNFT(\r\n        sourceAccount, tokenID, \"https://laubenheimer.eu/NFTs/\" + tokenID, account.address).estimateGas({from: sourceAccount});\r\n        console.log('ESTIMATED GAS WITH CREATED ACCOUNT: ', estimateGas);\r\n        const txCount = await web3.eth.getTransactionCount(sourceAccount);\r\n        const networkId = await web3.eth.net.getId();\r\n        // Build the transaction\r\n        const txObject = {\r\n          nonce: web3.utils.toHex(txCount),\r\n          to: contractAddress,\r\n          from: sourceAccount,\r\n          chainId: networkId,\r\n          value: web3.utils.toHex(web3.utils.toWei('0', 'ether')),\r\n          gasLimit: web3.utils.toHex(Math.round(estimateGas * 1.1)),\r\n          data: myData,\r\n          maxPriorityFeePerGas: web3.utils.toHex(web3.utils.toWei('2', 'gwei')),\r\n          type: 0x02\r\n        };\r\n        this.setState({sessionID: tokenID, seed: account.privateKey, userAccount: account.address, txObject: txObject});\r\n        // Sign the transaction\r\n        const raw = await web3.eth.accounts.signTransaction(\r\n          this.state.txObject,\r\n          process.env.REACT_APP_PRIVATE_KEY\r\n        );\r\n        // Broadcast the transaction\r\n        console.log(\"Broadcasting the transaction to the network...\");\r\n        const transaction = await web3.eth.sendSignedTransaction(raw.rawTransaction);\r\n        console.log('TX: ', transaction);\r\n        console.log('SessionID: ', tokenID);\r\n      }\r\n      catch(error2) {\r\n        console.log('Initialization failed 2: ', error2);\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n    if (this.state.count == 0)\r\n        this.initSession();\r\n    return (\r\n      <section id='App'>\r\n        <div className=\"App\">\r\n          <Contact \r\n            count = {this.state.count} \r\n            sessionID = {this.state.sessionID} \r\n            seed = {this.state.seed}\r\n            customerAccount = {this.state.customerAccount}\r\n            userAccount = {this.state.userAccount}\r\n          />\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Application />\r\n  </React.StrictMode>,\r\n  document.getElementById('Application')\r\n);"],"sourceRoot":""}